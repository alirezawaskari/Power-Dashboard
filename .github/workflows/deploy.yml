name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test SSH connection
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        timeout: 30s
        debug: true
        script: |
          echo "SSH connection successful!"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"
          ls -la

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Navigate to project directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Create lightweight backup (only essential files)
          if [ -d "backup" ]; then
            rm -rf backup
          fi
          mkdir -p backup
          cp .env backup/ 2>/dev/null || true
          
          # Pull latest code
          git pull origin main
          
          # Generate complete .env file from secrets FIRST
          cat > .env << EOF
          APP_NAME=PowerDashboard
          APP_ENV=production
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}

          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=error

          DB_CONNECTION=pgsql
          DB_HOST=power-dashboard-postgres
          DB_PORT=5432
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          BROADCAST_DRIVER=pusher
          CACHE_DRIVER=redis
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=redis
          SESSION_DRIVER=redis
          SESSION_LIFETIME=120

          MEMCACHED_HOST=127.0.0.1

          REDIS_HOST=power-dashboard-redis
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT=6379
          REDIS_CLIENT=predis

          RABBITMQ_HOST=power-dashboard-rabbitmq
          RABBITMQ_PORT=5672
          RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          RABBITMQ_VHOST=/

          MAIL_MAILER=smtp
          MAIL_HOST=mailpit
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS="noreply@${{ secrets.APP_URL }}"
          MAIL_FROM_NAME="PowerDashboard"

          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false

          PUSHER_APP_ID=
          PUSHER_APP_KEY=
          PUSHER_APP_SECRET=
          PUSHER_HOST=
          PUSHER_PORT=443
          PUSHER_SCHEME=https
          PUSHER_APP_CLUSTER=mt1

          VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
          VITE_PUSHER_HOST="${PUSHER_HOST}"
          VITE_PUSHER_PORT="${PUSHER_PORT}"
          VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
          VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

          SANCTUM_STATEFUL_DOMAINS=${{ secrets.APP_URL }},localhost,127.0.0.1,127.0.0.1:8000,::1
          EOF
          
          # Stop current containers
          docker compose down
          
          # Build and start new containers
          docker compose up -d --build
          
          # Check if containers started successfully
          if [ $? -eq 0 ]; then
            echo "Containers started successfully"
            # Wait for services to be ready
            sleep 30
            # Check container health
            docker compose ps
          else
            echo "Container startup failed or timed out"
            # Show logs for debugging
            docker compose logs --tail=50
            exit 1
          fi
          
          # Deployment completed successfully
          echo "Deployment successful!"
          # Clean up backup
          rm -rf backup
